// Clonal interference
// beneficial mutation fixation in the presence of other superior beneficial mutations

// The below code is for one fixation event, output SFS, run it for multiple experiments, generate average SFS
// In the MS output, segregating sites for position <= 0.5 are neutral sites, use only those for the SFS

// the below code is same as previous sweep cases, only difference is here fixation of beneficial mutation is occuring in the presence of other superior mutations

initialize() 
{
         initializeMutationRate(1e-6);
         initializeMutationType("m1", 0.5, "f", 0.0); // neutral mutations
         initializeMutationType("m2", 0.5, "f", 0.05);  // introduced ben mutation by hand at particular site whose fixation we are interested in in the presence of superior mutations
         initializeMutationType("m3", 0.5, "e", 0.1);  // superior mutation with exponential distribution
         
         initializeGenomicElementType("g1", m1, 1); // genome for neutral mutations
         initializeGenomicElementType("g3", m3, 1); // genome for beneficial mutations
         initializeGenomicElement(g1, 1, 999); // neutral
         initializeGenomicElement(g3, 1000, 1999); // beneficial
         initializeRecombinationRate(0);
       	m1.mutationStackPolicy = "f";
       	m2.mutationStackPolicy = "f";
       	m2.convertToSubstitution = F;
       	
       	
       	//m1.convertToSubstitution = F;
}

1 early() 
{
			defineConstant("simID", getSeed());
         sim.addSubpop("p1", 1000);
}

10000 late() // burn in till 10 N generations
{
			sim.outputFull(tempdir() + "slim_" + simID + ".txt");
        // introduce the sweep mutation
        target = sample(p1.genomes, 1);
        
        target.addNewDrawnMutation(m2, 0); // only one mutation is added at position 0
}


10000:11100 late() // 10N to until one fixation event
{
			g = p1.genomesNonNull;
			if(sum(g.mutations.position == 0) / size(g)==1.0) // if fixation occurs
			{
				p1.individuals.genomes.outputMS();
				//cat(simID + ": FIXED \n");
        		cat(sum(g.mutations.position == 0) / size(g) + ": freq \n");
        		sim.simulationFinished();
			}
        if (sum(g.mutations.position == 0) / size(g)==0) // if beneficial mutation is lost restart again
        {
          cat(simID + ": LOST â€“ RESTARTING\n");
          sim.readFromPopulationFile(tempdir() + "slim_" + simID + ".txt");
          setSeed(rdunif(1, 0, asInteger(2^62) - 1));
          target = sample(p1.genomes, 1);  
          target.addNewDrawnMutation(m2, 0);
        }       
}
